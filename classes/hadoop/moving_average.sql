-- DROP TABLE so as you can run it more than once
DROP TABLE IF EXISTS t_employee;

-- create table schema
CREATE TABLE t_employee ( 
	pk_cd_cnpj VARCHAR(14), 
	vlr_transacao DECIMAL(26,2),
	ref INT);

-- insert some values representing random CNPJ numbers, values and date in YYYYmm format.
INSERT INTO t_employee VALUES
('80389123000101',  4300, 201901),
('80389123000103',  1600, 201901),
('80389123000104',   300, 201901),
('80389123000102',  4600, 201901),
('80389123000101',  4400, 201902),
('80389123000103',  1200, 201902),
('80389123000104',   400, 201902),
('80389123000102',  4600, 201902),
('80389123000101',  4500, 201903),
('80389123000103',  1100, 201903),
('80389123000104',   300, 201903),
('80389123000102',  4700, 201903),
('80389123000101',  4900, 201904),
('80389123000103',  1300, 201904),
('80389123000104',   300, 201904),
('80389123000102',  4100, 201904),
('80389123000101',  4400, 201905),
('80389123000103',  1300, 201905),
('80389123000104',   200, 201905),
('80389123000102',  4200, 201905),
('80389123000101',  4200, 201906),
('80389123000103',  1600, 201906),
('80389123000104',   800, 201906),
('80389123000102',  400, 201906),
('8374908000104', 4500, 201901),
('8374908000103', 150, 201901),
('8374908000104',  5000, 201901),
('8374908000102', 4300, 201901),
('8374908000108', 4300, 201902),
('8374908000103', 1200, 201902),
('8374908000104',  300, 201902),
('8374908000102', 4500, 201902),
('8374908000107', 4700, 201903),
('8374908000103', 1900, 201903),
('8374908000104',  300, 201903),
('8374908000102', 4100, 201903),
('8374908000106', 4200, 201904),
('8374908000103', 1600, 201904),
('8374908000104',  800, 201904),
('8374908000102', 4400, 201904),
('8374908000106', 4800, 201905),
('8374908000103', 1200, 201905),
('8374908000104',  300, 201905),
('8374908000102', 4400, 201905),
('8374908000109', 4600, 201906),
('8374908000103', 1800, 201906),
('8374908000104',  900, 201906),
('8374908000102', 4400, 201906);


-- calculate the moving average of the value for each CNPJ (PARTITION BY pk_cd_cnpj), 
-- ordering by month (ORDER BY ref)
-- in a window of 3 months (ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)
SELECT *, 
	   AVG(vlr_transacao) OVER (PARTITION BY pk_cd_cnpj 
								ORDER BY ref ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg
FROM t_employee;


-- you can specify an alias for each window and specify it after the FROM clause using the 
-- WINDOW specification clause, similar to the CTE expressions (WITH clauses)
SELECT *, 
	   AVG(vlr_transacao) OVER three_month_window AS moving_avg_three,
	   AVG(vlr_transacao) OVER two_month_window AS moving_avg_two
FROM t_employee
WINDOW three_month_window AS (PARTITION BY pk_cd_cnpj ORDER BY ref ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),
       two_month_window AS (PARTITION BY pk_cd_cnpj ORDER BY ref ROWS BETWEEN 1 PRECEDING AND CURRENT ROW);
